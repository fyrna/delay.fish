#!/bin/bash
# delay.sh - the time feel too fast isn't ?
# this script by fyrna !!!
# linux-only !!!

VERSION="1.0.0"
AUTHOR="fyrna"

# :: helpers
show_help() {
  cat <<EOF
delay.sh v$VERSION - by $AUTHOR

USAGE:
  delay [OPTIONS] <time> [COMMAND...]
  echo "text" | delay <time>

OPTIONS:
  -r, --random <min-max> random delay between min and max
  -v, --verbose          show debug info
  -h, --help             show this help

TIME UNITS:
  100ms       milliseconds
  2s          seconds (default)
  1m          minutes

EXAMPLE:
  delay -v 1s echo "boom!"   # verbose
  cat file.txt | delay 500ms    # pipe mode
EOF
}

# time to secs
parse_time() {
  local time=$1
  if [[ $time =~ ([0-9]+)(ms|s|m)? ]]; then
    local num=${BASH_REMATCH[1]}
    local unit=${BASH_REMATCH[2]}
    case $unit in
      ms) echo "$num / 1000" | bc -l ;;
      s)  echo "$num" ;;
      m)  echo "$num * 60" | bc -l ;;
      *)  echo "$num" ;;  # default to seconds
    esac
  else
    echo "$time"
  fi
}

# random between min and max
random_sleep() {
  local range=$1
  local min max
  IFS='-' read -r min max <<< "$range"
  min=$(parse_time "$min")
  max=$(parse_time "$max")
  local diff=$(echo "$max - $min" | bc -l)
  local random=$(echo "$min + $diff * $RANDOM / 32767" | bc -l)
  echo "$random"
}

# :: main acript
main() {
  # parse options
  local random_range=""
  local verbose=false

  while [[ $# -gt 0 ]]; do
    case $1 in
      -r|--random)
        random_range=$2
        shift 2
        ;;
      -v|--verbose)
        verbose=true
        shift
        ;;
      -h|--help)
        show_help
        exit 0
        ;;
      *)
        break
        ;;
    esac
  done

  local sleep_time=0
  if [ -n "$random_range" ]; then
    sleep_time=$(random_sleep "$random_range")
    $verbose && echo "[delay] Random sleep: $sleep_time seconds"
  elif [ $# -ge 1 ]; then
    sleep_time=$(parse_time "$1")
    shift
  else
    show_help
    exit 1
  fi

  # pipe
  if [ ! -t 0 ]; then
    $verbose && echo "[delay] Pipe mode: waiting $sleep_time seconds"
    sleep "$sleep_time"
    cat
    exit
  fi

  # Normal mode
  if [ $# -eq 0 ]; then
    echo "[delay] No command provided (sleeping only)"
    sleep "$sleep_time"
    exit
  fi

  $verbose && echo "[delay] Will execute after $sleep_time seconds: $*"

  sleep "$sleep_time"
  "$@"
}

main "$@"
