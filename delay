#!/bin/bash
# delay.sh - the time feel too fast isn't ?
# this script by fyrna !!!
# linux-only !!!

VERSION="1.0.0"
AUTHOR="fyrna"

# check dependencies
check_deps() {
  if ! command -v bc &> /dev/null; then
    echo "Error: bc is required but not installed." >&2
    exit 1
  fi
}

# :: helpers
show_help() {
  cat <<EOF
delay.sh v$VERSION - by $AUTHOR

USAGE:
  delay [OPTIONS] <time> [COMMAND...]
  echo "text" | delay <time>

OPTIONS:
  -r, --random <min-max> random delay between min and max
  -p, --progress         show progress bar
  -v, --verbose          show debug info
  -h, --help             show this help

TIME UNITS:
  100ms       milliseconds
  2s          seconds
  1m          minutes

EXAMPLE:
  delay -v 1s echo "boom!"    # verbose
  cat file.txt | delay 500ms  # pipe mode
  delay -p 5s                 # with progress bar
EOF
}

# time to secs
parse_time() {
  local time=$1
  if [[ $time =~ ^([0-9]+)(ms|s|m)?$ ]]; then
    local num=${BASH_REMATCH[1]}
    local unit=${BASH_REMATCH[2]}
    case $unit in
      ms) echo "scale=3; $num / 1000" | bc -l ;;
      s)  echo "$num" ;;
      m)  echo "$num * 60" | bc -l ;;
      *)  echo "$num" ;;  # default to seconds
    esac
  else
    echo "Error: Invalid time format '$time'" >&2
    exit 1
  fi
}

# random between min and max
random_sleep() {
  local range=$1
  local min max
  
  if [[ ! $range =~ ^[0-9]+[ms]?-[0-9]+[ms]?$ ]]; then
    echo "Error: Invalid range format '$range'. Use format like '1-5' or '100ms-2s'" >&2
    exit 1
  fi
  
  IFS='-' read -r min max <<< "$range"
  min=$(parse_time "$min")
  max=$(parse_time "$max")
  
  # Check if min <= max
  if (( $(echo "$min > $max" | bc -l) )); then
    echo "Error: min ($min) should be <= max ($max)" >&2
    exit 1
  fi
  
  local diff=$(echo "$max - $min" | bc -l)
  local random=$(echo "scale=3; $min + $diff * $RANDOM / 32767" | bc -l)
  echo "$random"
}

show_progress() {
  local sleep_time=$1
  local steps=20
  local step_interval=$(echo "scale=3; $sleep_time / $steps" | bc -l)
  local spinner=("⣾" "⢿" "⡿" "⣟" "⣯" "⣷" "⣾" "⣽")
  local spin_len=${#spinner[@]}

  # echo [delay] <- not planned

  for ((i=0; i<steps; i++)); do
    sleep "$step_interval"
    
    # Move cursor to start of line and clear it
    echo -ne "\r\033[K[delay] Progress: ["
    
    # Draw completed parts
    for ((j=0; j<=i; j++)); do
      echo -ne "\033[1;32m█\033[0m"
    done
    
    # Draw remaining spaces
    for ((j=i+1; j<steps; j++)); do
      echo -ne " "
    done
    
    # Show percentage and spinner
    local percent=$(( (i+1) * 100 / steps ))
    local spin_char="${spinner[$((i % spin_len))]}"
    echo -ne "] $percent% ($spin_char)"
  done
  echo -e "\n[delay] Complete!"
}

# :: main script
main() {
  check_deps
  
  # parse options
  local random_range=""
  local verbose=false
  local show_progress_bar=false

  while [[ $# -gt 0 ]]; do
    case $1 in
      -r|--random)
        if [[ -z "$2" ]]; then
          echo "Error: --random requires a range argument" >&2
          exit 1
        fi
        random_range=$2
        shift 2
        ;;
      -p|--progress)
        show_progress_bar=true
        shift
        ;;
      -v|--verbose)
        verbose=true
        shift
        ;;
      -h|--help)
        show_help
        exit 0
        ;;
      --)
        shift
        break
        ;;
      -*)
        echo "Error: Unknown option '$1'" >&2
        show_help
        exit 1
        ;;
      *)
        break
        ;;
    esac
  done

  local sleep_time=0
  if [ -n "$random_range" ]; then
    sleep_time=$(random_sleep "$random_range")
    $verbose && echo "[delay] Random sleep: $sleep_time seconds"
  elif [ $# -ge 1 ]; then
    sleep_time=$(parse_time "$1")
    shift
  else
    echo "Error: No time specified" >&2
    show_help
    exit 1
  fi

  # pipe mode
  if [ ! -t 0 ]; then
    $verbose && echo "[delay] Pipe mode: waiting $sleep_time seconds"
    if $show_progress_bar; then
      show_progress "$sleep_time"
    else
      sleep "$sleep_time"
    fi
    cat
    exit
  fi

  # normal mode
  if [ $# -eq 0 ]; then
    $verbose && echo "[delay] No command provided (sleeping only)"
    if $show_progress_bar; then
      show_progress "$sleep_time"
    else
      sleep "$sleep_time"
    fi
    exit
  fi

  $verbose && echo "[delay] Will execute after $sleep_time seconds: $*"

  if $show_progress_bar; then
    show_progress "$sleep_time"
  else
    sleep "$sleep_time"
  fi
  
  "$@"
}

main "$@"
